# Generated by Django 5.2 on 2025-09-04 15:02

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0014_add_display_name_to_organization_membership'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScrapyConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default', max_length=100)),
                ('platform', models.CharField(choices=[('facebook', 'Facebook'), ('instagram', 'Instagram'), ('linkedin', 'LinkedIn'), ('tiktok', 'TikTok')], max_length=30)),
                ('content_type', models.CharField(choices=[('posts', 'Posts'), ('reels', 'Reels'), ('comments', 'Comments'), ('profile', 'Profile')], default='posts', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, help_text='Description of this configuration', null=True)),
                ('delay_range', models.CharField(default='1-3', help_text="Delay range in seconds (e.g., '1-3')", max_length=20)),
                ('user_agent_rotation', models.BooleanField(default=True)),
                ('use_proxy', models.BooleanField(default=False)),
                ('proxy_list', models.TextField(blank=True, help_text='List of proxies, one per line', null=True)),
                ('headless', models.BooleanField(default=True)),
                ('viewport_width', models.IntegerField(default=1920)),
                ('viewport_height', models.IntegerField(default=1080)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Scrapy Configuration',
                'verbose_name_plural': 'Scrapy Configurations',
                'unique_together': {('platform', 'content_type')},
            },
        ),
        migrations.CreateModel(
            name='ScrapyJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this scraping job', max_length=255)),
                ('target_urls', models.JSONField(help_text='List of URLs to scrape')),
                ('source_names', models.JSONField(default=list, help_text='List of source names corresponding to URLs')),
                ('num_of_posts', models.IntegerField(blank=True, default=10, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('output_folder_id', models.IntegerField(blank=True, help_text='Destination folder ID', null=True)),
                ('auto_create_folders', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('total_urls', models.IntegerField(default=0)),
                ('processed_urls', models.IntegerField(default=0)),
                ('successful_scrapes', models.IntegerField(default=0)),
                ('failed_scrapes', models.IntegerField(default=0)),
                ('job_metadata', models.JSONField(blank=True, help_text='Stores detailed job execution information', null=True)),
                ('error_log', models.TextField(blank=True, null=True)),
                ('scrapy_process_id', models.CharField(blank=True, help_text='Process ID for running scrapy job', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scrapy_integration.scrapyconfig')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scrapy_jobs', to='users.project')),
            ],
            options={
                'verbose_name': 'Scrapy Job',
                'verbose_name_plural': 'Scrapy Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScrapyResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_url', models.URLField(max_length=500)),
                ('source_name', models.CharField(blank=True, max_length=255, null=True)),
                ('scraped_data', models.JSONField(help_text='Raw scraped data')),
                ('processed_data', models.JSONField(blank=True, help_text='Processed/cleaned data', null=True)),
                ('scrape_timestamp', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('imported_to_platform', models.BooleanField(default=False, help_text='Whether data was imported to platform-specific tables')),
                ('folder_id', models.IntegerField(blank=True, help_text='Destination folder ID', null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='scrapy_integration.scrapyjob')),
            ],
            options={
                'verbose_name': 'Scrapy Result',
                'verbose_name_plural': 'Scrapy Results',
                'ordering': ['-scrape_timestamp'],
            },
        ),
    ]
